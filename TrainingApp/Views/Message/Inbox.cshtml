@model IEnumerable<TrainingApp.ViewModels.UsersPanelViewModels>
@using TrainingApp.ViewModels;
@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "Inbox";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <link href="~/css/styleChat1.css" rel="stylesheet" />
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/js/all.min.js"></script>
    <script src="~/js/script.js"></script>
</head>

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Left Panel: List of Unique Users -->
        <div class="col-md-4 people-list bg-light p-3 rounded-left" id="people-list">
            <div class="search mb-3">
                <div class="input-group">
                    <input type="text" id="searchInput" class="form-control" placeholder="Search users" />
                    <div class="input-group-append">
                        <button id="searchButton" class="btn btn-outline-secondary">
                            <i class="fa fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
            <ul class="list-unstyled" id="userList">
                @foreach (var user in Model)
                {
                    <li class="clearfix user-link p-2 border-bottom" data-senderid="@user.Id">
                        @*<img src="~/images/@user.Avatar" alt="avatar" class="rounded-circle mr-2" width="40" height="40" />*@
                        <div class="about">
                            <div class="name font-weight-bold">@user.Name</div>
                            <div class="status text-muted">
                                <i class="fa fa-circle @(user.IsOnline ? "text-success" : "text-danger")"></i> @(user.IsOnline ? "Online" : "Offline")
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </div>

        <!-- Right Panel: Chat History and Message Box -->
        <div class="col-md-8 chat bg-white p-3 rounded-right">
            <div class="chat-header clearfix border-bottom pb-2 mb-3">
                @*<img src="~/images/default-avatar.jpg" alt="avatar" id="chat-avatar" class="rounded-circle mr-2" width="50" height="50" />*@
                <div class="chat-about">
                    <h6 class="mb-0">Chat with <span id="chat-user-name" class="font-weight-bold">Select a user</span></h6>
                    <small class="text-muted">No messages yet</small>
                </div>
                <i class="fa fa-star float-right mt-2"></i>
            </div>

            <div class="chat-history overflow-auto mb-3" id="chat-messages" style="height: 400px;">
                <!-- Chat messages will be loaded here via AJAX -->
            </div>

            <div class="chat-message clearfix">
                @using (Html.BeginForm("SendNewMessage", "Message", FormMethod.Post, new { id = "messageForm" }))
                {
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="receiverId" name="ReceiverId" />
                    <div class="input-group">
                        <textarea name="MessageText" id="messageText" class="form-control" placeholder="Type your message" rows="1"></textarea>
                        <div class="input-group-append">
                            <button type="submit" class="btn btn-success">Send</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
<script>
$(document).ready(function() {
    var receiverId;

    // Load chat history when a user is clicked
    $('.user-link').click(function(e) {
        e.preventDefault();
        receiverId = $(this).data('senderid');
        $('#receiverId').val(receiverId);
        $('#chat-user-name').text($(this).find('.name').text());
        $('#chat-avatar').attr('src', $(this).find('img').attr('src'));
        loadChatHistory(receiverId);
        startPolling();
    });

    // Function to load chat history
    async function loadChatHistory(receiverId) {
        try {
            const response = await fetch('@Url.Action("GetChatHistory", "Message")?receiverId=' + receiverId);
            if (!response.ok) throw new Error('Network response was not ok');
            const data = await response.json();
            const chatMessages = $('#chat-messages');
            chatMessages.empty();
            data.forEach(message => {
                const formattedTime = formatTimestamp(message.Timestamp);
                chatMessages.append(`<div class="message-item ${message.IsMine ? 'my-message' : 'other-message'}"><strong>${message.SenderName}:</strong> ${message.MessageText} <span class="text-muted small">${formattedTime}</span></div>`);
            });
            chatMessages.scrollTop(chatMessages[0].scrollHeight);
        } catch (error) {
            console.error('Error loading chat history:', error);
        }
    }

    // Handle form submission for sending a new message
    $('#messageForm').submit(async function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        try {
            const response = await fetch(this.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            const result = await response.json();
            if (result.success) {
                loadChatHistory(receiverId);
                $('#messageText').val('');
            } else {
                alert('Error sending message: ' + result.message);
            }
        } catch (error) {
            console.error('Error sending message:', error);
        }
    });

    // Function to format timestamps
    function formatTimestamp(timestamp) {
        var now = moment();
        var messageTime = moment.utc(timestamp).local();
        if (messageTime.isSame(now, 'day')) {
            return messageTime.format('h:mm A') + ' (Today)';
        } else if (messageTime.isSame(now.subtract(1, 'days'), 'day')) {
            return messageTime.format('h:mm A') + ' (Yesterday)';
        } else {
            return messageTime.format('h:mm A, MMM D, YYYY');
        }
    }

    // Start polling for new messages
    function startPolling() {
        setInterval(function() {
            if (receiverId) {
                loadChatHistory(receiverId);
            }
        }, 5000);
    }

    // Search users based on input
    $('#searchButton').click(async function() {
        const query = $('#searchInput').val().trim();
        searchUsers(query);
    });

    // Also trigger search on input change for a better UX
    $('#searchInput').on('input', function() {
        const query = $(this).val().trim();
        searchUsers(query);
    });

    async function searchUsers(query) {
        try {
            const response = await fetch('@Url.Action("SearchUsers", "Message")?query=' + encodeURIComponent(query));
            if (!response.ok) throw new Error('Network response was not ok');
            const users = await response.json();
            const userList = $('#userList');
            userList.empty();
            users.forEach(user => {
                userList.append(`<li class="clearfix user-link p-2 border-bottom" data-senderid="${user.Id}">
                    <div class="about">
                        <div class="name font-weight-bold">${user.Name}</div>
                        <div class="status text-muted">
                            <i class="fa fa-circle ${user.IsOnline ? "text-success" : "text-danger"}"></i> ${user.IsOnline ? "Online" : "Offline"}
                        </div>
                    </div>
                </li>`);
            });
        } catch (error) {
            console.error('Error searching users:', error);
        }
    }
});
</script>
