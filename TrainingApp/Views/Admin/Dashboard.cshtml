@using TrainingApp.ViewModels
@using TrainingApp.Models
@model DashboardViewModel

@{
    ViewBag.Title = "Admin Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <link href="~/vendor/fontawesome/css/fontawesome.min.css" rel="stylesheet" />
    <link href="~/vendor/fontawesome/css/solid.css" rel="stylesheet" />
    <link href="~/vendor/fontawesome/css/brands.min.css" rel="stylesheet" />
    <link href="~/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/vendor/datatables/DataTables-1.10.25/css/dataTables.dataTables.min.css" rel="stylesheet" />
    <link href="~/vendor/datatables/DataTables-1.10.25/css/jquery.dataTables.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="~/vendor/datatables/datatables.min.js"></script>
    <script src="~/js/initiate-datatables.js"></script>
    <script src="~/js/DashboardAdmin.js"></script>

</head>

<body>
    <div class="container mt-4">
        <h1>Admin Dashboard</h1>
        <hr />
        <div class="active">
            <div class="content">
                <div class="container">
                    <div class="page-title">
                        <h3>
                            Users
                            <button type="button" class="btn btn-sm btn-outline-primary float-end" data-bs-toggle="modal" data-bs-target="#addUserModal">Add User</button>
                        </h3>

                        <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="addUserModalLabel">Add User</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div>
                                            @using (Html.BeginForm("AddUser","Admin", FormMethod.Post))
                                            {
                                                @Html.AntiForgeryToken()

                                                <div class="form-group">
                                                    @Html.LabelFor(m => m.Name)
                                                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", @id = "name", @autocomplete = "name" })
                                                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                                                </div>

                                                <div class="form-group">
                                                    @Html.LabelFor(m => m.Email)
                                                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @id = "email", @autocomplete = "email" })
                                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                                </div>

                                                <div class="form-group">
                                                    @Html.LabelFor(m => m.Password)
                                                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", @id = "password", @autocomplete = "new-password" })
                                                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                                </div>

                                                <div class="form-group">
                                                    @Html.LabelFor(m => m.UserRole)
                                                    @{
                                                        foreach (var role in Enum.GetValues(typeof(UserRole)))
                                                        {
                                                            <div class="form-check">
                                                                <input type="radio" class="form-check-input" id="userRole_@(role)" name="UserRole" value="@role" />
                                                                <label class="form-check-label" for="userRole_@(role)">@role</label>
                                                            </div>
                                                        }
                                                    }
                                                    @Html.ValidationMessageFor(m => m.UserRole, "", new { @class = "text-danger" })
                                                </div>

                                                <div id="additionalFields"></div>

                                                <button type="submit" class="btn btn-primary">Add User</button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="box box-primary">
                        <div class="box-body">
                            <table width="100%" class="table table-hover" id="dataTables-example">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Added By</th>
                                        <th>University</th>
                                        <th>Supervisor</th>
                                        <th>Company</th>
                                        <th>Supervisor</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in Model.users)
                                    {
                                        <tr>
                                            <td>@user.Id</td>
                                            <td>@user.Name</td>
                                            <td><a href="mailto:@user.Email">@user.Email</a></td>
                                            <td>@user.Roles</td>
                                            <td>@user.AddedBy</td>
                                            <td>@(user.UniversityID!=null?Model.GetUniName((int)user.UniversityID):"Not Found")</td>
                                            <td>@(user.UniversitySupervisorID != null ? Model.GetSupervisorName(user.UniversitySupervisorID.Value) : "Not Found")</td>
                                            <td>@(user.CompanyID!=null?Model.GetCompanyName((int)user.CompanyID):"Not Found")</td>
                                            <td>@(user.CompanySupervisorID != null ? Model.GetSupervisorName(user.CompanySupervisorID.Value) : "Not Found")</td>
                                            <td class="text-end">
                                                <a href="" class="btn btn-outline-info btn-sm"><i class="fas fa-pen"></i></a>
                                                <form action="@Url.Action("DeleteUser")" method="post" style="display:inline;">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="id" value="@user.Id" />
                                                    <button type="submit" class="btn btn-outline-danger btn-sm" onclick="return confirm('Are you sure you want to delete this user?');">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </form>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>
<script src="~/vendor/jquery/jquery.min.js"></script>
<script src="~/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="~/vendor/datatables/datatables.min.js"></script>
<script src="~/js/initiate-datatables.js"></script>
@Scripts.Render("~/bundles/bootstrap")
@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">

        $(document).ready(function () {
    'use strict';
        $('input[name="UserRole"]').change(function () {
        alert("he");
    var role = $(this).val();
    var additionalFields = $('#additionalFields');
    additionalFields.empty();
    if (role === 'UniversitySupervisor') {
        additionalFields.append(`
<div class="form-group">
    @Html.LabelFor(model => model.UniversityID, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.DropDownListFor(model => model.UniversityID, Model.UniversityNames, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.UniversityID, "", new { @class = "text-danger" })
    </div>
</div>                `);
            }
    else if (role === 'CompanySupervisor') {
        additionalFields.append(`
<div class="form-group">
    @Html.LabelFor(model => model.CompanyID, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        @Html.DropDownListFor(model => model.CompanyID, Model.CompaniesNames, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.CompanyID, "", new { @class = "text-danger" })
    </div>
</div>
                `);
            }
    else if (role === 'Trainer') {
        additionalFields.append(`
                    <div class="form-group">
                    @Html.LabelFor(m=>m.UniversityID)
                    @Html.DropDownListFor(m=>m.UniversityID, Model.UniversityNames)
                    @Html.ValidationMessageFor(m=>m.UniversityID)
                    </div>
                    <div class="form-group">
                    @Html.LabelFor(m=>m.UniversitySupervisorID)
                    @Html.DropDownListFor(m=>m.UniversitySupervisorID,Model.UniSupervisors)
                    @Html.ValidationMessageFor(m=>m.UniversitySupervisorID)
                    </div>
                    <div class="form-group">
                    @Html.LabelFor(m=>m.CompanySupervisorID)
                    @Html.DropDownListFor(m=>m.CompanySupervisorID, Model.CompanySupervisors)
                    @Html.ValidationMessageFor(m=>m.CompanySupervisorID)
                    </div>
                `);
            }
        });
    // Function to handle form submission
    function handleFormSubmission(modalId, formId) {
        $(document).on('submit', formId, function (e) {
            e.preventDefault();
            var form = $(this);
            $.ajax({
                url: form.attr('action'),
                type: 'POST',
                data: form.serialize(),
                success: function (response) {
                    if (response.success) {
                        $(modalId).modal('hide');
                        location.reload(); // Or update the table dynamically
                    } else {
                        $(modalId + ' .modal-body').html(response);
                    }
                },
                error: function () {
                    alert('An error occurred.');
                }
            });
        });
        }

    // Initialize form handling for different modals
    handleFormSubmission('#addUniversitySupervisorModal', '#addUniversitySupervisorForm');
    handleFormSubmission('#addCompanySupervisorModal', '#addCompanySupervisorForm');
    handleFormSubmission('#addTrainerModal', '#addTrainerForm');

    function deleteUser(id) {
            if (confirm("Are you sure you want to delete this user?")) {
        $.ajax({
            url: '@Url.Action("DeleteUser")',
            type: 'POST',
            data: { id: id },
            success: function (response) {
                if (response.success) {
                    alert('User deleted successfully.');
                    location.reload(); // Reload the page or update the table dynamically
                } else {
                    alert('Failed to delete user.');
                }
            },
            error: function () {
                alert('An error occurred.');
            }
        });
            }
        }
    });

</script>
